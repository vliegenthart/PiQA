import os
from typing import List
import pandas as pd

from piqa.config import logging
from langchain.chat_models import ChatOpenAI
from langchain.prompts.chat import (
    ChatPromptTemplate,
    HumanMessagePromptTemplate
)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")
chat = ChatOpenAI(temperature=0, openai_api_key=OPENAI_API_KEY, model=OPENAI_MODEL) # type: ignore


def format_prompt(df: pd.DataFrame, instruction: str, task_template: str) -> List:
    """Format the chat prompt.

    Args:
        df (pd.DataFrame): Dataframe containing text.
        instruction (str): The instruction for the task.
        task_template (str): The task template.

    Returns:
        List: Formatted chat prompts.
    """
    pdf_content = ' '.join(df['Text'])
    instruction_human_prompt = HumanMessagePromptTemplate.from_template(instruction)
    task_human_prompt = HumanMessagePromptTemplate.from_template(task_template)

    chat_prompt = ChatPromptTemplate.from_messages([instruction_human_prompt, task_human_prompt])
    return chat_prompt.format_prompt(instruction=instruction, pdf_content=pdf_content).to_messages()


def get_chat_completion(df: pd.DataFrame) -> str:
    """Generate completion for the chat model.

    Args:
        df (pd.DataFrame): Dataframe containing text.

    Returns:
        str: Completion generated by the chat model.
    """
    try:
        logging.info("Generating completion...")
        instruction = ("You are a venture capitalist looking to invest in a startup. You have been given a "
                       "startup's pitch deck. You are asked to extract key information from the document and provide "
                       "a recommendation on whether to invest in the startup or not.")
        task_template = """TASK:
        Extract key information from the content below. The content is the text of a pitch deck. Only use the
        content provided and be as precise (include important numbers) and concise as possible.  Structure your answer
        into the following sections: Name of the product, Team (in this format: <NAME>: <TITLE> - <OTHER INFO>),
        Traction, Problem, Solution, Market, Market Size, Product-Market Fit, Go-to-market (GTM) Strategy, Target
        Customers, Competition, Business Model, and Revenue Model, a concise summary of the content below (maximum of
        80 words), A longer summary of the content below (maximum of 200 words) and a critical, step by step, guide
        on how to assess the risks of investing in this startup, and a recommendation on whether to invest in the
        startup or not. Only include the sections if the relevant information is present in the content. Use structure
        for each section if relevant, like a list or table. Include a header for each section. Format the output in
        Markdown. CONTENT: {pdf_content} ANSWER: """

        formatted_prompt = format_prompt(df, instruction, task_template)
        logging.debug(f"PROMPT: {formatted_prompt}")
        resp = chat(formatted_prompt)
        return resp.dict()["content"]

    except Exception as e:
        logging.error(f"Error generating chat completion: {e}")
        return "Error generating chat completion"
